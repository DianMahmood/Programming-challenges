public class TinyLife {
    public static void main(String[] args) throws Exception{
        play(Long.decode(args[0]));
    }

    public static boolean getCell(long world, int col, int row){
        return (col > 7 || row > 7 || col < 0 || row < 0) ? false : PackedLong.get(world, (col + 8*row));
    }

    public static long setCell(long world, int col, int row, boolean value) {
        return (col > 7 || row > 7 || col < 0 || row < 0) ? world : PackedLong.set(world, (col + 8*row), value);
    }


    public static void play(long world) throws Exception {
        int userResponse = 0;
        while (userResponse != 'q') {
            print(world);
            userResponse = System.in.read();
            world = nextGeneration(world);
        }
    }

    public static int countNeighbours(long world, int col, int row) {
        int aliveNeighbours = 0;
        aliveNeighbours += (getCell(world, col-1, row-1)) ? 1 : 0;
        aliveNeighbours += (getCell(world, col, row-1)) ? 1 : 0;
        aliveNeighbours += (getCell(world, col+1, row-1)) ? 1 : 0;
        aliveNeighbours += (getCell(world, col-1, row)) ? 1 : 0;
        aliveNeighbours += (getCell(world, col+1, row)) ? 1 : 0;
        aliveNeighbours += (getCell(world, col-1, row+1)) ? 1 : 0;
        aliveNeighbours += (getCell(world, col, row+1)) ? 1 : 0;
        aliveNeighbours += (getCell(world, col+1, row+1)) ? 1 : 0;
        return aliveNeighbours;
    }

    public static boolean computeCell(long world, int col, int row) {
        // liveCell is true if the cell at position (row,col) in the world is alive
        boolean liveCell = getCell(world, col, row);
        // neighbours is the amount of alive neighbours to cell (col,row)
        int neighbours = countNeighbours(world, col, row);
        //we will return this value at the end of the method to indicate
        //whether cell(col,row) should be alive in the next generation.
        boolean nextCell = false;
        //A live cell with less than two neighbours dies(underpopulation)
        if (neighbours < 2) {
            nextCell = false;
        }
        //A live cell with two or three neighbours  lives(balanced population)
        if (liveCell && neighbours == 2 || liveCell && neighbours == 3) {
            nextCell = true;
        }
        //A live cell with more than three neighbours dies(overpopulation)
        if (neighbours > 3) {
            nextCell = false;
        }
        //A dead cell with exactly three live neighbours comes alive
        if (!liveCell && neighbours == 3) {
            nextCell = true;
        }
        return nextCell;
    }


    public static void print(long world){
        System.out.println("-");
        for(int row = 0; row < 8; row++){
            for (int col = 0; col < 8; col++){
                System.out.println(getCell(world, col, row)? "#":"_");
            }
            System.out.println();
        }
    }
    
    //public static long nextGeneration(long world){}*/

}
